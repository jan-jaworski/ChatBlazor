@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using ChatBlazor.Utils
@using ChatBlazor.Models
@using ChatBlazor.Contexts
@using Microsoft.AspNetCore.Identity
@using Blazored.LocalStorage
@using ChatBlazor.Hubs
@using System.Globalization
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<IdentityUser> UserManager
@inject AppDbContext DbContext
@inject IHubContext<ChatHub> HubContext
@inject IHttpContextAccessor HttpContextAccessor

@attribute [Authorize]
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>



<div class="container-fluid">
    <div class="row flex-nowrap">
        <!--   users list for selection    -->
        <div id="ChatUsers" class="col-3 col-md-4">

            <InputText @bind-Value="searchInput" @oninput="OnSearchInput" placeholder="Search users" class="form-control mb-3" />
            @foreach (var userCard in filteredUserCards)
            {

                <div class="chat-container" @onclick="() => SwitchChat(userCard.UserName)">
                    <div class="chat-message position-relative">
                        <div class="user-info">
                            <div class="user-name">@userCard.UserName</div>
                            @if (userCard.IsOnline) //online status
                            {
                                <div class="online-status">
                                    <div class="status-dot"></div>
                                    <span>Online</span>
                                </div>
                            }
                            else
                            {
                                <div class="offline-status">
                                    <div class="status-dot-offline"></div>
                                    <span>Offline</span>
                                </div>
                            }
                            @if (userCard.LastMessageTime is not null) //to check if not null
                            {
                                <div class="timestamp">@userCard.LastMessageTime</div>
                            }
                            else
                            {
                                <div class="timestamp"></div>
                            }
                        </div>
                        <div class="message-text">@userCard.LastMessageText</div>
                    </div>
                </div>



            }
        </div>



        <!--   todo: user search  -->
        <!--   interface for messaging     -->
        @if (receiverInput != null)
        {
            <div class="col-9 col-md-8 d-flex flex-column">
                <div class="chat-header">
                    <div class="user-info">
                        <div class="user-name">@receiverInput</div>
                    </div>
                </div>
                <div class="messages-container" @ref="messagesContainerRef">
                    @foreach (var message in messages)
                    {
                        if (CheckIfCurrentUser(message.Sender.UserName))
                        {
                            <div class="message our-message">@message.Text</div>
                        }
                        else
                        {
                            <div class="message someones-message">@message.Text</div>
                        }
                    }
                </div>

                <div class="chat-input mt-auto">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="messageInput" @bind:event="oninput" @onkeypress="HandleKeyPress" placeholder="Type a message..." />
                        <button class="btn" type="button" @onclick="SendMessage">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

    </div>
</div>





















@code {
    private List<IdentityUser> users = new();
    private List<UserCard> userCards = new();
    private List<UserCard> filteredUserCards = new();

    private List<Message> messages = new();


    private string? receiverInput;
    private string? messageInput;
    private string searchInput = string.Empty;

    private MessagesManager? messagesManager;
    private IdentityUser? currentUser;
    private HubConnection? hubConnection;
    private bool isInitialized = false;
    private ElementReference messagesContainerRef;
    private CancellationTokenSource debounceToken = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUser = await UserManager.GetUserAsync(user);
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            await InitializeHubConnection();
            isInitialized = true;
        }
        await ScrollToBottom();
    }

    private async Task InitializeHubConnection()
    {
        if (currentUser != null)
        {
            var cookieValue = HttpContextAccessor.HttpContext?.Request.Cookies[".AspNetCore.Identity.Application"];
            Console.WriteLine($"Cookie value: '{cookieValue}'");

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
                {
                    if (!string.IsNullOrEmpty(cookieValue))
                    {
                        options.Headers.Add("Cookie", $".AspNetCore.Identity.Application={cookieValue}");
                    }
                    else
                    {
                        throw new Exception("No auth cookie found");
                    }
                })
                .WithAutomaticReconnect()
                .Build();
            //Receive new message from hub
            hubConnection.On<MessageDto>("ReceiveMessage", (message) =>
            {
                // Add the new message to the list
                messages.Add(new Message
                    {
                        SenderId = message.SenderId,
                        Sender = new IdentityUser { UserName = message.SenderName },
                        ReceiverId = message.ReceiverId,
                        Text = message.Text,
                        Timestamp = DateTime.Now // Assuming you want to set the timestamp to now
                    });

                // Notify the component that its state has changed
                InvokeAsync(StateHasChanged);
            });

            //Receive user status from hub
            hubConnection.On<string, bool>("ReceiveUserStatus", (userId, isOnline) =>
            {
                string username = users.FirstOrDefault(u => u.Id == userId)?.UserName ?? string.Empty;
                if (username != string.Empty)
                {
                    if (userCards.Any(u => u.UserName == username))
                    {
                        userCards.First(u => u.UserName == username).IsOnline = isOnline;
                        InvokeAsync(StateHasChanged);
                    }
                }
            });



            try
            {
                await hubConnection.StartAsync();
                //Console.WriteLine("Connected to SignalR Hub");//for debug
            }
            catch (Exception ex)
            {
                throw new Exception("Error while starting signalR connection", ex);
            }

            // Get the list of users
            messagesManager = new MessagesManager(DbContext, HubContext, currentUser, null);
            users = await messagesManager.GetUsers();
            userCards = await messagesManager.GetUserCards();
            filteredUserCards = userCards;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainerRef);
    }

    private async Task SwitchChat(string receiverName)
    {
        if (currentUser != null && !string.IsNullOrEmpty(receiverName))
        {
            receiverInput = receiverName;
            var receiver = await UserManager.FindByNameAsync(receiverName);
            if (receiver != null)
            {
                messagesManager = new MessagesManager(DbContext, HubContext, currentUser, receiver);
                var chatMessages = await messagesManager.GetMessagesForChat();
                if (chatMessages != null)
                {
                    messages = chatMessages;
                    StateHasChanged();
                }
                else
                {
                    messages.Clear();
                    StateHasChanged();
                }
            }
        }
    }






    /// <summary>
    /// This checks if given username is our current user
    /// </summary>
    /// <param name="userName">username to check</param>
    /// <returns></returns>
    private bool CheckIfCurrentUser(string userName)
    {
        return currentUser.UserName == userName;
    }



    /// <summary>
    /// This method sends a message to the receiver from messageInput
    /// </summary>
    ///
    private async Task SendMessage()
    {
        if (currentUser is not null && !string.IsNullOrEmpty(receiverInput) && !string.IsNullOrEmpty(messageInput))
        {
            var receiver = await UserManager.FindByNameAsync(receiverInput);
            if (receiver != null)
            {
                messagesManager = new MessagesManager(DbContext, HubContext, currentUser, receiver);
                await messagesManager.SendMessage(messageInput);

                // Clear the message input
                messageInput = string.Empty;

                // Refresh messages
                var chatMessages = await messagesManager.GetMessagesForChat();
                if (chatMessages != null)
                {
                    messages = chatMessages;
                    StateHasChanged();
                }
                userCards = await messagesManager.GetUserCards();

            }
        }
    }


    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchInput = e.Value?.ToString() ?? string.Empty;
        debounceToken.Cancel();
        debounceToken.Dispose();
        debounceToken = new CancellationTokenSource();
        await Task.Delay(500, debounceToken.Token);
        FilterUserCards();
    }

    private void FilterUserCards()
    {
        if (string.IsNullOrEmpty(searchInput))
        {
            filteredUserCards = userCards;
        }
        else
        {
            filteredUserCards = userCards.Where(u => u.UserName.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
        }

    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }
}